/* Board Support Package (BSP) for the EK-TM4C123GXL board */
#include "qpc.h"  /* QP/C framework/RTOS */
#include "bsp.h"  /* Board Support Package */

#include "TM4C123GH6PM.h" /* MCU header file */

/* on-board LEDs */
#define LED_RED   (1U << 1)
#define LED_BLUE  (1U << 2)
#define LED_GREEN (1U << 3)

/* on-board switches */
#define BTN_SW1   (1U << 4)
#define BTN_SW2   (1U << 0)

static uint32_t volatile l_tickCtr;
static uint8_t volatile l_sw1pressed;


/* ISRs --------------------------------------------------------------------*/
void SysTick_Handler(void) {
    QXK_ISR_ENTRY();  /* inform QXK about entering an ISR */
    QF_TICK_X(0U, (void *)0); /* process time events for rate 0 */
    QXK_ISR_EXIT(); /* inform QXK about exiting an ISR */
}

void GPIOPortF_IRQHandler(void) {
    QXK_ISR_ENTRY();  /* inform QXK about entering an ISR */
    if ((GPIOF_AHB->RIS & BTN_SW1) != 0U) {
        QXSemaphore_signal(&g_sw1Sema);
    }
    GPIOF_AHB->ICR = 0xFFU; /* clear interrupt sources */
    QXK_ISR_EXIT(); /* inform QXK about exiting an ISR */
}

/* BSP interface -----------------------------------------------------------*/
void BSP_init(void) {
    SYSCTL->RCGCGPIO  |= (1U << 5); /* enable Run mode for GPIOF */
    SYSCTL->GPIOHBCTL |= (1U << 5); /* enable AHB for GPIOF */
    GPIOF_AHB->DIR |= (LED_RED | LED_BLUE | LED_GREEN);
    GPIOF_AHB->DEN |= (LED_RED | LED_BLUE | LED_GREEN);

    /* configure the Buttons */
    GPIOF_AHB->DIR &= ~(BTN_SW1 | BTN_SW2); /*  set direction: input */
    GPIOF_AHB->DEN |= (BTN_SW2 | BTN_SW1);
    GPIOF_AHB->PUR |= (BTN_SW2 | BTN_SW1);

    /* GPIO interrupt setup for SW1 */
    GPIOF_AHB->IS  &= ~BTN_SW1; /* edge detect for SW1 */
    GPIOF_AHB->IBE &= ~BTN_SW1; /* only one edge generate the interrupt */
    GPIOF_AHB->IEV &= ~BTN_SW1; /* a falling edge triggers the interrupt */
    GPIOF_AHB->IM  |= BTN_SW1;  /* enable GPIOF interrupt for SW1 */

    QXSemaphore_init(&g_sw1Sema, 0U, 1U); /* empty binary semaphore */
}

void BSP_ledRedOn(void) {
    GPIOF_AHB->DATA_Bits[LED_RED] = LED_RED;
}

void BSP_ledRedOff(void) {
    GPIOF_AHB->DATA_Bits[LED_RED] = 0U;
}

void BSP_ledBlueOn(void) {
    GPIOF_AHB->DATA_Bits[LED_BLUE] = LED_BLUE;
}

void BSP_ledBlueOff(void) {
    GPIOF_AHB->DATA_Bits[LED_BLUE] = 0U;
}

void BSP_ledGreenOn(void) {
    GPIOF_AHB->DATA_Bits[LED_GREEN] = LED_GREEN;
}

void BSP_ledGreenOff(void) {
    GPIOF_AHB->DATA_Bits[LED_GREEN] = 0U;
}

/* QP callbacks ------------------------------------------------------------*/
void QF_onStartup(void) {
    /* configure the SysTick timer to fire at the BSP_TICKS_PER_SEC rate */
    SystemCoreClockUpdate();
    SysTick_Config(SystemCoreClock / BSP_TICKS_PER_SEC);

    /* explicitly set priorities of kernel-aware ISRs */
    NVIC_SetPriority(SysTick_IRQn, QF_AWARE_ISR_CMSIS_PRI);
    NVIC_SetPriority(GPIOF_IRQn,   QF_AWARE_ISR_CMSIS_PRI);
    /* ... */

    /* enable IRQs... */
    NVIC_EnableIRQ(GPIOF_IRQn); /* enable GPIOF interrupt in the NVIC */
}
/*..........................................................................*/
void QF_onCleanup(void) {
}
/*..........................................................................*/
void QXK_onIdle(void) {
#if defined NDEBUG
    /* Put the CPU and peripherals to the low-power mode.
    * you might need to customize the clock management for your application,
    * see the datasheet for your particular Cortex-M3 MCU.
    */
    __WFI(); /* Wait-For-Interrupt */
#endif
}
/*..........................................................................*/
void Q_onAssert(char const *module, int loc) {
    /* TBD: damage control */
    (void)module; /* avoid the "unused parameter" compiler warning */
    (void)loc;    /* avoid the "unused parameter" compiler warning */
    NVIC_SystemReset();
}
